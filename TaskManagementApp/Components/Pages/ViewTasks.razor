@page "/viewtasks"
@using ClassLibraryModel
@using ClassLibraryDal
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@rendermode InteractiveServer

<h2 class="heading">Tasks To Be Completed</h2>

<div class="task-header">
    <button class="add-task-button" @onclick="AddNewTask">+</button>
</div>

<div class="filter-buttons">
    <button class="filter-button" @onclick="FilterByDueDate">Filter by Due Date</button>
    <button class="filter-button" @onclick="FilterByPriority">Filter by Priority</button>
    <button class="filter-button" @onclick="ShowCompletedTasks">Show Completed Tasks</button>
    <button class="filter-button" @onclick="LoadPendingTasks">Show Pending Tasks</button>
</div>

<div class="task-list">
    @if (tasks != null && tasks.Count > 0)
    {
        foreach (var task in tasks)
        {
            <div class="task-card" @onclick="() => ToggleTaskDetails(task.TaskManagmentID)">
                <div class="task-details">
                    <h4>@task.TaskName</h4>
                    <p><strong>Priority:</strong> @task.TaskPriority</p>
                    <p><strong>Due Date:</strong> @task.DueDate.ToShortDateString()</p>
                    @if (expandedTaskId == task.TaskManagmentID)
                    {
                        <p><strong>Description:</strong> @task.TaskDescription</p>
                        <p><strong>Special Notes:</strong> @task.SpecialNote</p>
                        <div class="task-actions-expanded">
                            <button @onclick="() => UpdateTask(task.TaskManagmentID)" title="Update"><i class="fas fa-edit"></i></button>
                            <button @onclick="() => DeleteTask(task.TaskManagmentID)" title="Delete"><i class="fas fa-trash"></i></button>
                        </div>
                    }
                </div>
                <div class="task-actions">
                    @if (task.TaskStatus == "Pending")
                    {
                        <button class="complete-button" @onclick="async () => await CompleteTask(task.TaskManagmentID)">Complete</button>
                    }
                </div>
            </div>
        }
    }
    else
    {
        <p>No tasks found.</p>
    }
</div>

@code {
    private List<TaskModel> tasks = new List<TaskModel>();
    private int expandedTaskId = -1;

    protected override void OnInitialized()
    {
        LoadPendingTasks();  // Load pending tasks by default
    }

    private void LoadPendingTasks()
    {
        tasks = DalTask.GetAllTasks().Where(t => t.TaskStatus == "Pending").ToList();
    }

    private void ShowCompletedTasks()
    {
        tasks = DalTask.GetAllTasks().Where(t => t.TaskStatus == "Completed").ToList();
    }

    private void AddNewTask()
    {
        Navigation.NavigateTo("/createtask");
    }

    private async Task CompleteTask(int taskId)
    {
        DalTask.CompleteTask(taskId);  // Mark the task as completed in the database
        LoadPendingTasks();  // Reload the pending tasks
        await JSRuntime.InvokeVoidAsync("alert", "Task completed");
    }

    private void UpdateTask(int taskId)
    {
        Navigation.NavigateTo($"/updatetask/{taskId}");
    }

    private async Task DeleteTask(int taskId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this task?");
        if (confirmed)
        {
            DalTask.DeleteTask(taskId);
            LoadPendingTasks();
        }
    }

    private void ToggleTaskDetails(int taskId)
    {
        expandedTaskId = expandedTaskId == taskId ? -1 : taskId;
    }

    private void FilterByDueDate()
    {
        tasks = tasks.OrderBy(t => t.DueDate).ToList();
    }

    private void FilterByPriority()
    {
        tasks = tasks.OrderByDescending(t => t.TaskPriority == "High")
                     .ThenByDescending(t => t.TaskPriority == "Medium")
                     .ThenByDescending(t => t.TaskPriority == "Low")
                     .ToList();
    }
}
